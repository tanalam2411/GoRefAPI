1. https://subscription.packtpub.com/book/application_development/9781786468666/1/ch01lvl1sec8/building-a-simple-web-server-with-net-http
  - https://sourcegraph.com/github.com/building-microservices-with-go/chapter1

2. https://subscription.packtpub.com/book/web_development/9781789130751/1
  - https://sourcegraph.com/github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go@master/-/blob/final-application/src/rest/mockHandler.go

3. https://subscription.packtpub.com/book/web_development/9781787286740/1
  - https://github.com/PacktPublishing/Go-Web-Development-Cookbook

4. https://subscription.packtpub.com/video/application_development/9781789614992
  - https://sourcegraph.com/github.com/PacktPublishing/Building-RESTful-APIs-with-Go/-/blob/README.md

5. https://subscription.packtpub.com/book/application_development/9781788294287
  - https://sourcegraph.com/github.com/PacktPublishing/Building-RESTful-Web-Services-with-Go/-/tree/Chapter10

6. https://subscription.packtpub.com/book/application_development/9781788294287
  - https://sourcegraph.com/github.com/PacktPublishing/Building-RESTful-Web-Services-with-Go/-/tree/Chapter10

7. https://subscription.packtpub.com/book/web_development/9781785282317
  -



```
I have a small script witten in Golang using GIN and GORM. It is masically a CRUD for 1 table. The API is handled by GIN and Database by GORM. The problem is that the script is badly structured and needs some fixes:

1. The controllers and the models are dumped into 2 folders. This needs to be structured so that each model and each controller is in its own subfolder.

2. Right now the GORM model has all the functions as static. Problem is the code is multiplied and not re-usable when adding a new CRUD for a new table. The main CRUD model functions need to be in an abstract form where they simply receive the Gorm struct and operate the desired operations on that struct. That way I can reuse the same model functions for all the Gorm structs.

3. Optimize the GetAll results with a reusable way to pass filters also.

4. Any other code optimizations to make it very easy to expand and use best practices.

Attached is the sample code.
```



https://github.com/dedidot/gorm-gin/blob/master/Models/Scheme.go
https://github.com/pawmart/api2go-gin-gorm/blob/master/model/model_user.go
https://github.com/acrosson/gingorm/tree/master/controllers
https://github.com/manyminds/api2go
https://github.com/building-microservices-with-go/chapter1
https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Go/blob/master/final-application/src/rest/rest.go
https://github.com/PacktPublishing/Go-Web-Development-Cookbook/blob/master/chapter04/create-record-mysql.go
https://github.com/PacktPublishing/Building-RESTful-Web-Services-with-Go/blob/master/Chapter10/basicServer/main.go
https://github.com/PacktPublishing/Go-Web-Development-Cookbook/blob/master/chapter08/my-first-beego-project/filters/firstfilter.go
https://github.com/PacktPublishing/Hands-On-Restful-Web-services-with-Go/blob/master/chapter4/ginExample/main.go
https://github.com/PacktPublishing/Hands-On-Software-Engineering-with-Golang/tree/e68088d4335914fbe4f8fa7a88a3f4d91c442b26
https://github.com/PacktPublishing/Go-Web-Development-Cookbook